// Version: 1.5
// Author: Martin Wistauder
// Date: 25.09.2022
//
// Server Address: gameserver.ist.tugraz.at
// Port:           80

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: netcode.proto

package netcode

import (
	dab "./dab"
	dom "./dom"
	dozo "./dozo"
	nim "./nim"
	tak "./tak"
	tko "./tko"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TurnStatus int32

const (
	TurnStatus_OK            TurnStatus = 0
	TurnStatus_INVALID_TURN  TurnStatus = 1
	TurnStatus_NOT_YOUR_TURN TurnStatus = 2
	TurnStatus_MATCH_OVER    TurnStatus = 3
)

// Enum value maps for TurnStatus.
var (
	TurnStatus_name = map[int32]string{
		0: "OK",
		1: "INVALID_TURN",
		2: "NOT_YOUR_TURN",
		3: "MATCH_OVER",
	}
	TurnStatus_value = map[string]int32{
		"OK":            0,
		"INVALID_TURN":  1,
		"NOT_YOUR_TURN": 2,
		"MATCH_OVER":    3,
	}
)

func (x TurnStatus) Enum() *TurnStatus {
	p := new(TurnStatus)
	*p = x
	return p
}

func (x TurnStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TurnStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_netcode_proto_enumTypes[0].Descriptor()
}

func (TurnStatus) Type() protoreflect.EnumType {
	return &file_netcode_proto_enumTypes[0]
}

func (x TurnStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TurnStatus.Descriptor instead.
func (TurnStatus) EnumDescriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{0}
}

type GameStatus int32

const (
	GameStatus_YOUR_TURN         GameStatus = 0
	GameStatus_OPPONENTS_TURN    GameStatus = 1
	GameStatus_MATCH_WON         GameStatus = 3
	GameStatus_MATCH_LOST        GameStatus = 4
	GameStatus_DRAW              GameStatus = 5
	GameStatus_MATCH_NOT_STARTED GameStatus = 6
	GameStatus_MATCH_ABORTED     GameStatus = 7
)

// Enum value maps for GameStatus.
var (
	GameStatus_name = map[int32]string{
		0: "YOUR_TURN",
		1: "OPPONENTS_TURN",
		3: "MATCH_WON",
		4: "MATCH_LOST",
		5: "DRAW",
		6: "MATCH_NOT_STARTED",
		7: "MATCH_ABORTED",
	}
	GameStatus_value = map[string]int32{
		"YOUR_TURN":         0,
		"OPPONENTS_TURN":    1,
		"MATCH_WON":         3,
		"MATCH_LOST":        4,
		"DRAW":              5,
		"MATCH_NOT_STARTED": 6,
		"MATCH_ABORTED":     7,
	}
)

func (x GameStatus) Enum() *GameStatus {
	p := new(GameStatus)
	*p = x
	return p
}

func (x GameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_netcode_proto_enumTypes[1].Descriptor()
}

func (GameStatus) Type() protoreflect.EnumType {
	return &file_netcode_proto_enumTypes[1]
}

func (x GameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameStatus.Descriptor instead.
func (GameStatus) EnumDescriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{1}
}

type SetPseudonymResponse_ErrorCode int32

const (
	SetPseudonymResponse_UNDEFINED_ERROR  SetPseudonymResponse_ErrorCode = 0
	SetPseudonymResponse_OK               SetPseudonymResponse_ErrorCode = 1
	SetPseudonymResponse_REQUEST_REJECTED SetPseudonymResponse_ErrorCode = 2
	SetPseudonymResponse_ALREADY_USED     SetPseudonymResponse_ErrorCode = 3
	SetPseudonymResponse_TOO_LONG         SetPseudonymResponse_ErrorCode = 4
	SetPseudonymResponse_EMPTY_FIELDS     SetPseudonymResponse_ErrorCode = 5
)

// Enum value maps for SetPseudonymResponse_ErrorCode.
var (
	SetPseudonymResponse_ErrorCode_name = map[int32]string{
		0: "UNDEFINED_ERROR",
		1: "OK",
		2: "REQUEST_REJECTED",
		3: "ALREADY_USED",
		4: "TOO_LONG",
		5: "EMPTY_FIELDS",
	}
	SetPseudonymResponse_ErrorCode_value = map[string]int32{
		"UNDEFINED_ERROR":  0,
		"OK":               1,
		"REQUEST_REJECTED": 2,
		"ALREADY_USED":     3,
		"TOO_LONG":         4,
		"EMPTY_FIELDS":     5,
	}
)

func (x SetPseudonymResponse_ErrorCode) Enum() *SetPseudonymResponse_ErrorCode {
	p := new(SetPseudonymResponse_ErrorCode)
	*p = x
	return p
}

func (x SetPseudonymResponse_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetPseudonymResponse_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_netcode_proto_enumTypes[2].Descriptor()
}

func (SetPseudonymResponse_ErrorCode) Type() protoreflect.EnumType {
	return &file_netcode_proto_enumTypes[2]
}

func (x SetPseudonymResponse_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetPseudonymResponse_ErrorCode.Descriptor instead.
func (SetPseudonymResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{5, 0}
}

type UserRegistrationResponse_ErrorCode int32

const (
	UserRegistrationResponse_UNDEFINED_ERROR   UserRegistrationResponse_ErrorCode = 0
	UserRegistrationResponse_OK                UserRegistrationResponse_ErrorCode = 1
	UserRegistrationResponse_INVALID_PARAMETER UserRegistrationResponse_ErrorCode = 2
	UserRegistrationResponse_EMPTY_FIELDS      UserRegistrationResponse_ErrorCode = 3
	UserRegistrationResponse_NOT_ALLOWED       UserRegistrationResponse_ErrorCode = 4
)

// Enum value maps for UserRegistrationResponse_ErrorCode.
var (
	UserRegistrationResponse_ErrorCode_name = map[int32]string{
		0: "UNDEFINED_ERROR",
		1: "OK",
		2: "INVALID_PARAMETER",
		3: "EMPTY_FIELDS",
		4: "NOT_ALLOWED",
	}
	UserRegistrationResponse_ErrorCode_value = map[string]int32{
		"UNDEFINED_ERROR":   0,
		"OK":                1,
		"INVALID_PARAMETER": 2,
		"EMPTY_FIELDS":      3,
		"NOT_ALLOWED":       4,
	}
)

func (x UserRegistrationResponse_ErrorCode) Enum() *UserRegistrationResponse_ErrorCode {
	p := new(UserRegistrationResponse_ErrorCode)
	*p = x
	return p
}

func (x UserRegistrationResponse_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRegistrationResponse_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_netcode_proto_enumTypes[3].Descriptor()
}

func (UserRegistrationResponse_ErrorCode) Type() protoreflect.EnumType {
	return &file_netcode_proto_enumTypes[3]
}

func (x UserRegistrationResponse_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRegistrationResponse_ErrorCode.Descriptor instead.
func (UserRegistrationResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{8, 0}
}

type GroupRegistrationResponse_ErrorCode int32

const (
	GroupRegistrationResponse_UNDEFINED_ERROR         GroupRegistrationResponse_ErrorCode = 0
	GroupRegistrationResponse_OK                      GroupRegistrationResponse_ErrorCode = 1
	GroupRegistrationResponse_UNKNOWN_USER            GroupRegistrationResponse_ErrorCode = 2
	GroupRegistrationResponse_TOO_MANY_GROUP_MEMBERS  GroupRegistrationResponse_ErrorCode = 3
	GroupRegistrationResponse_USER_ALREADY_REGISTERED GroupRegistrationResponse_ErrorCode = 4
	GroupRegistrationResponse_AUTH_FAILED             GroupRegistrationResponse_ErrorCode = 5
)

// Enum value maps for GroupRegistrationResponse_ErrorCode.
var (
	GroupRegistrationResponse_ErrorCode_name = map[int32]string{
		0: "UNDEFINED_ERROR",
		1: "OK",
		2: "UNKNOWN_USER",
		3: "TOO_MANY_GROUP_MEMBERS",
		4: "USER_ALREADY_REGISTERED",
		5: "AUTH_FAILED",
	}
	GroupRegistrationResponse_ErrorCode_value = map[string]int32{
		"UNDEFINED_ERROR":         0,
		"OK":                      1,
		"UNKNOWN_USER":            2,
		"TOO_MANY_GROUP_MEMBERS":  3,
		"USER_ALREADY_REGISTERED": 4,
		"AUTH_FAILED":             5,
	}
)

func (x GroupRegistrationResponse_ErrorCode) Enum() *GroupRegistrationResponse_ErrorCode {
	p := new(GroupRegistrationResponse_ErrorCode)
	*p = x
	return p
}

func (x GroupRegistrationResponse_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupRegistrationResponse_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_netcode_proto_enumTypes[4].Descriptor()
}

func (GroupRegistrationResponse_ErrorCode) Type() protoreflect.EnumType {
	return &file_netcode_proto_enumTypes[4]
}

func (x GroupRegistrationResponse_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupRegistrationResponse_ErrorCode.Descriptor instead.
func (GroupRegistrationResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{10, 0}
}

type AuthPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatrNumber string `protobuf:"bytes,1,opt,name=matr_number,json=matrNumber,proto3" json:"matr_number,omitempty"`
	Secret     string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *AuthPacket) Reset() {
	*x = AuthPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPacket) ProtoMessage() {}

func (x *AuthPacket) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPacket.ProtoReflect.Descriptor instead.
func (*AuthPacket) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{0}
}

func (x *AuthPacket) GetMatrNumber() string {
	if x != nil {
		return x.MatrNumber
	}
	return ""
}

func (x *AuthPacket) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type MatchIDPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken  string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	MatchToken string `protobuf:"bytes,2,opt,name=match_token,json=matchToken,proto3" json:"match_token,omitempty"`
}

func (x *MatchIDPacket) Reset() {
	*x = MatchIDPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIDPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIDPacket) ProtoMessage() {}

func (x *MatchIDPacket) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIDPacket.ProtoReflect.Descriptor instead.
func (*MatchIDPacket) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{1}
}

func (x *MatchIDPacket) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *MatchIDPacket) GetMatchToken() string {
	if x != nil {
		return x.MatchToken
	}
	return ""
}

type IDPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
}

func (x *IDPacket) Reset() {
	*x = IDPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPacket) ProtoMessage() {}

func (x *IDPacket) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPacket.ProtoReflect.Descriptor instead.
func (*IDPacket) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{2}
}

func (x *IDPacket) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

type GetTimeoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutSeconds uint32 `protobuf:"varint,1,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *GetTimeoutResponse) Reset() {
	*x = GetTimeoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTimeoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeoutResponse) ProtoMessage() {}

func (x *GetTimeoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeoutResponse.ProtoReflect.Descriptor instead.
func (*GetTimeoutResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{3}
}

func (x *GetTimeoutResponse) GetTimeoutSeconds() uint32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type SetPseudonymRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth      *AuthPacket `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Pseudonym string      `protobuf:"bytes,2,opt,name=pseudonym,proto3" json:"pseudonym,omitempty"`
}

func (x *SetPseudonymRequest) Reset() {
	*x = SetPseudonymRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPseudonymRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPseudonymRequest) ProtoMessage() {}

func (x *SetPseudonymRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPseudonymRequest.ProtoReflect.Descriptor instead.
func (*SetPseudonymRequest) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{4}
}

func (x *SetPseudonymRequest) GetAuth() *AuthPacket {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *SetPseudonymRequest) GetPseudonym() string {
	if x != nil {
		return x.Pseudonym
	}
	return ""
}

type SetPseudonymResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode SetPseudonymResponse_ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=netcode.SetPseudonymResponse_ErrorCode" json:"error_code,omitempty"`
}

func (x *SetPseudonymResponse) Reset() {
	*x = SetPseudonymResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPseudonymResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPseudonymResponse) ProtoMessage() {}

func (x *SetPseudonymResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPseudonymResponse.ProtoReflect.Descriptor instead.
func (*SetPseudonymResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{5}
}

func (x *SetPseudonymResponse) GetErrorCode() SetPseudonymResponse_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return SetPseudonymResponse_UNDEFINED_ERROR
}

type GetUserTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
}

func (x *GetUserTokenResponse) Reset() {
	*x = GetUserTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserTokenResponse) ProtoMessage() {}

func (x *GetUserTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserTokenResponse.ProtoReflect.Descriptor instead.
func (*GetUserTokenResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserTokenResponse) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

type UserRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fullname   string `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Email      string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	MatrNumber string `protobuf:"bytes,3,opt,name=matr_number,json=matrNumber,proto3" json:"matr_number,omitempty"`
	Secret     string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *UserRegistrationRequest) Reset() {
	*x = UserRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistrationRequest) ProtoMessage() {}

func (x *UserRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistrationRequest.ProtoReflect.Descriptor instead.
func (*UserRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{7}
}

func (x *UserRegistrationRequest) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *UserRegistrationRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserRegistrationRequest) GetMatrNumber() string {
	if x != nil {
		return x.MatrNumber
	}
	return ""
}

func (x *UserRegistrationRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type UserRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode UserRegistrationResponse_ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=netcode.UserRegistrationResponse_ErrorCode" json:"error_code,omitempty"`
}

func (x *UserRegistrationResponse) Reset() {
	*x = UserRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistrationResponse) ProtoMessage() {}

func (x *UserRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistrationResponse.ProtoReflect.Descriptor instead.
func (*UserRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{8}
}

func (x *UserRegistrationResponse) GetErrorCode() UserRegistrationResponse_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return UserRegistrationResponse_UNDEFINED_ERROR
}

type GroupRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth       *AuthPacket `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	MatrNumber []string    `protobuf:"bytes,2,rep,name=matr_number,json=matrNumber,proto3" json:"matr_number,omitempty"`
}

func (x *GroupRegistrationRequest) Reset() {
	*x = GroupRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistrationRequest) ProtoMessage() {}

func (x *GroupRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistrationRequest.ProtoReflect.Descriptor instead.
func (*GroupRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{9}
}

func (x *GroupRegistrationRequest) GetAuth() *AuthPacket {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *GroupRegistrationRequest) GetMatrNumber() []string {
	if x != nil {
		return x.MatrNumber
	}
	return nil
}

type GroupRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode GroupRegistrationResponse_ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=netcode.GroupRegistrationResponse_ErrorCode" json:"error_code,omitempty"`
}

func (x *GroupRegistrationResponse) Reset() {
	*x = GroupRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistrationResponse) ProtoMessage() {}

func (x *GroupRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistrationResponse.ProtoReflect.Descriptor instead.
func (*GroupRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{10}
}

func (x *GroupRegistrationResponse) GetErrorCode() GroupRegistrationResponse_ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return GroupRegistrationResponse_UNDEFINED_ERROR
}

type DirectChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPseudonym string `protobuf:"bytes,1,opt,name=user_pseudonym,json=userPseudonym,proto3" json:"user_pseudonym,omitempty"`
}

func (x *DirectChallenge) Reset() {
	*x = DirectChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectChallenge) ProtoMessage() {}

func (x *DirectChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectChallenge.ProtoReflect.Descriptor instead.
func (*DirectChallenge) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{11}
}

func (x *DirectChallenge) GetUserPseudonym() string {
	if x != nil {
		return x.UserPseudonym
	}
	return ""
}

type MatchmakingParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Parameter:
	//
	//	*MatchmakingParameter_RandomIsDefault
	//	*MatchmakingParameter_DirectMatchmaking
	Parameter isMatchmakingParameter_Parameter `protobuf_oneof:"parameter"`
}

func (x *MatchmakingParameter) Reset() {
	*x = MatchmakingParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchmakingParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchmakingParameter) ProtoMessage() {}

func (x *MatchmakingParameter) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchmakingParameter.ProtoReflect.Descriptor instead.
func (*MatchmakingParameter) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{12}
}

func (m *MatchmakingParameter) GetParameter() isMatchmakingParameter_Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (x *MatchmakingParameter) GetRandomIsDefault() *Nothing {
	if x, ok := x.GetParameter().(*MatchmakingParameter_RandomIsDefault); ok {
		return x.RandomIsDefault
	}
	return nil
}

func (x *MatchmakingParameter) GetDirectMatchmaking() *DirectChallenge {
	if x, ok := x.GetParameter().(*MatchmakingParameter_DirectMatchmaking); ok {
		return x.DirectMatchmaking
	}
	return nil
}

type isMatchmakingParameter_Parameter interface {
	isMatchmakingParameter_Parameter()
}

type MatchmakingParameter_RandomIsDefault struct {
	RandomIsDefault *Nothing `protobuf:"bytes,10,opt,name=random_is_default,json=randomIsDefault,proto3,oneof"`
}

type MatchmakingParameter_DirectMatchmaking struct {
	DirectMatchmaking *DirectChallenge `protobuf:"bytes,11,opt,name=direct_matchmaking,json=directMatchmaking,proto3,oneof"`
}

func (*MatchmakingParameter_RandomIsDefault) isMatchmakingParameter_Parameter() {}

func (*MatchmakingParameter_DirectMatchmaking) isMatchmakingParameter_Parameter() {}

type MatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken                string                `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	GameToken                string                `protobuf:"bytes,2,opt,name=game_token,json=gameToken,proto3" json:"game_token,omitempty"`
	MatchmakingParameters    *MatchmakingParameter `protobuf:"bytes,3,opt,name=matchmaking_parameters,json=matchmakingParameters,proto3" json:"matchmaking_parameters,omitempty"`
	TimeoutSuggestionSeconds uint32                `protobuf:"varint,4,opt,name=timeout_suggestion_seconds,json=timeoutSuggestionSeconds,proto3" json:"timeout_suggestion_seconds,omitempty"`
	// Types that are assignable to GameParameters:
	//
	//	*MatchRequest_NimGameParameters
	//	*MatchRequest_DabGameParameters
	//	*MatchRequest_DomGameParameters
	//	*MatchRequest_DzoGameParameters
	//	*MatchRequest_TakGameParameters
	//	*MatchRequest_TkoGameParameters
	GameParameters isMatchRequest_GameParameters `protobuf_oneof:"game_parameters"`
}

func (x *MatchRequest) Reset() {
	*x = MatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequest) ProtoMessage() {}

func (x *MatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequest.ProtoReflect.Descriptor instead.
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{13}
}

func (x *MatchRequest) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *MatchRequest) GetGameToken() string {
	if x != nil {
		return x.GameToken
	}
	return ""
}

func (x *MatchRequest) GetMatchmakingParameters() *MatchmakingParameter {
	if x != nil {
		return x.MatchmakingParameters
	}
	return nil
}

func (x *MatchRequest) GetTimeoutSuggestionSeconds() uint32 {
	if x != nil {
		return x.TimeoutSuggestionSeconds
	}
	return 0
}

func (m *MatchRequest) GetGameParameters() isMatchRequest_GameParameters {
	if m != nil {
		return m.GameParameters
	}
	return nil
}

func (x *MatchRequest) GetNimGameParameters() *nim.GameParameter {
	if x, ok := x.GetGameParameters().(*MatchRequest_NimGameParameters); ok {
		return x.NimGameParameters
	}
	return nil
}

func (x *MatchRequest) GetDabGameParameters() *dab.GameParameter {
	if x, ok := x.GetGameParameters().(*MatchRequest_DabGameParameters); ok {
		return x.DabGameParameters
	}
	return nil
}

func (x *MatchRequest) GetDomGameParameters() *dom.GameParameter {
	if x, ok := x.GetGameParameters().(*MatchRequest_DomGameParameters); ok {
		return x.DomGameParameters
	}
	return nil
}

func (x *MatchRequest) GetDzoGameParameters() *dozo.GameParameter {
	if x, ok := x.GetGameParameters().(*MatchRequest_DzoGameParameters); ok {
		return x.DzoGameParameters
	}
	return nil
}

func (x *MatchRequest) GetTakGameParameters() *tak.GameParameter {
	if x, ok := x.GetGameParameters().(*MatchRequest_TakGameParameters); ok {
		return x.TakGameParameters
	}
	return nil
}

func (x *MatchRequest) GetTkoGameParameters() *tko.GameParameter {
	if x, ok := x.GetGameParameters().(*MatchRequest_TkoGameParameters); ok {
		return x.TkoGameParameters
	}
	return nil
}

type isMatchRequest_GameParameters interface {
	isMatchRequest_GameParameters()
}

type MatchRequest_NimGameParameters struct {
	NimGameParameters *nim.GameParameter `protobuf:"bytes,10,opt,name=nim_game_parameters,json=nimGameParameters,proto3,oneof"`
}

type MatchRequest_DabGameParameters struct {
	DabGameParameters *dab.GameParameter `protobuf:"bytes,11,opt,name=dab_game_parameters,json=dabGameParameters,proto3,oneof"`
}

type MatchRequest_DomGameParameters struct {
	DomGameParameters *dom.GameParameter `protobuf:"bytes,12,opt,name=dom_game_parameters,json=domGameParameters,proto3,oneof"`
}

type MatchRequest_DzoGameParameters struct {
	DzoGameParameters *dozo.GameParameter `protobuf:"bytes,13,opt,name=dzo_game_parameters,json=dzoGameParameters,proto3,oneof"`
}

type MatchRequest_TakGameParameters struct {
	TakGameParameters *tak.GameParameter `protobuf:"bytes,14,opt,name=tak_game_parameters,json=takGameParameters,proto3,oneof"`
}

type MatchRequest_TkoGameParameters struct {
	TkoGameParameters *tko.GameParameter `protobuf:"bytes,15,opt,name=tko_game_parameters,json=tkoGameParameters,proto3,oneof"`
}

func (*MatchRequest_NimGameParameters) isMatchRequest_GameParameters() {}

func (*MatchRequest_DabGameParameters) isMatchRequest_GameParameters() {}

func (*MatchRequest_DomGameParameters) isMatchRequest_GameParameters() {}

func (*MatchRequest_DzoGameParameters) isMatchRequest_GameParameters() {}

func (*MatchRequest_TakGameParameters) isMatchRequest_GameParameters() {}

func (*MatchRequest_TkoGameParameters) isMatchRequest_GameParameters() {}

type MatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchToken      string `protobuf:"bytes,1,opt,name=match_token,json=matchToken,proto3" json:"match_token,omitempty"`
	BeginningPlayer bool   `protobuf:"varint,2,opt,name=beginning_player,json=beginningPlayer,proto3" json:"beginning_player,omitempty"`
}

func (x *MatchResponse) Reset() {
	*x = MatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResponse) ProtoMessage() {}

func (x *MatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResponse.ProtoReflect.Descriptor instead.
func (*MatchResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{14}
}

func (x *MatchResponse) GetMatchToken() string {
	if x != nil {
		return x.MatchToken
	}
	return ""
}

func (x *MatchResponse) GetBeginningPlayer() bool {
	if x != nil {
		return x.BeginningPlayer
	}
	return false
}

type TurnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId *MatchIDPacket `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	// Types that are assignable to GameTurn:
	//
	//	*TurnRequest_NimGameTurn
	//	*TurnRequest_DabGameTurn
	//	*TurnRequest_DomGameTurn
	//	*TurnRequest_DzoGameTurn
	//	*TurnRequest_TakGameTurn
	//	*TurnRequest_TkoGameTurn
	GameTurn isTurnRequest_GameTurn `protobuf_oneof:"game_turn"`
}

func (x *TurnRequest) Reset() {
	*x = TurnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnRequest) ProtoMessage() {}

func (x *TurnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnRequest.ProtoReflect.Descriptor instead.
func (*TurnRequest) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{15}
}

func (x *TurnRequest) GetMatchId() *MatchIDPacket {
	if x != nil {
		return x.MatchId
	}
	return nil
}

func (m *TurnRequest) GetGameTurn() isTurnRequest_GameTurn {
	if m != nil {
		return m.GameTurn
	}
	return nil
}

func (x *TurnRequest) GetNimGameTurn() *nim.GameTurn {
	if x, ok := x.GetGameTurn().(*TurnRequest_NimGameTurn); ok {
		return x.NimGameTurn
	}
	return nil
}

func (x *TurnRequest) GetDabGameTurn() *dab.GameTurn {
	if x, ok := x.GetGameTurn().(*TurnRequest_DabGameTurn); ok {
		return x.DabGameTurn
	}
	return nil
}

func (x *TurnRequest) GetDomGameTurn() *dom.GameTurn {
	if x, ok := x.GetGameTurn().(*TurnRequest_DomGameTurn); ok {
		return x.DomGameTurn
	}
	return nil
}

func (x *TurnRequest) GetDzoGameTurn() *dozo.GameTurn {
	if x, ok := x.GetGameTurn().(*TurnRequest_DzoGameTurn); ok {
		return x.DzoGameTurn
	}
	return nil
}

func (x *TurnRequest) GetTakGameTurn() *tak.GameTurn {
	if x, ok := x.GetGameTurn().(*TurnRequest_TakGameTurn); ok {
		return x.TakGameTurn
	}
	return nil
}

func (x *TurnRequest) GetTkoGameTurn() *tko.GameTurn {
	if x, ok := x.GetGameTurn().(*TurnRequest_TkoGameTurn); ok {
		return x.TkoGameTurn
	}
	return nil
}

type isTurnRequest_GameTurn interface {
	isTurnRequest_GameTurn()
}

type TurnRequest_NimGameTurn struct {
	NimGameTurn *nim.GameTurn `protobuf:"bytes,10,opt,name=nim_game_turn,json=nimGameTurn,proto3,oneof"`
}

type TurnRequest_DabGameTurn struct {
	DabGameTurn *dab.GameTurn `protobuf:"bytes,11,opt,name=dab_game_turn,json=dabGameTurn,proto3,oneof"`
}

type TurnRequest_DomGameTurn struct {
	DomGameTurn *dom.GameTurn `protobuf:"bytes,12,opt,name=dom_game_turn,json=domGameTurn,proto3,oneof"`
}

type TurnRequest_DzoGameTurn struct {
	DzoGameTurn *dozo.GameTurn `protobuf:"bytes,13,opt,name=dzo_game_turn,json=dzoGameTurn,proto3,oneof"`
}

type TurnRequest_TakGameTurn struct {
	TakGameTurn *tak.GameTurn `protobuf:"bytes,14,opt,name=tak_game_turn,json=takGameTurn,proto3,oneof"`
}

type TurnRequest_TkoGameTurn struct {
	TkoGameTurn *tko.GameTurn `protobuf:"bytes,15,opt,name=tko_game_turn,json=tkoGameTurn,proto3,oneof"`
}

func (*TurnRequest_NimGameTurn) isTurnRequest_GameTurn() {}

func (*TurnRequest_DabGameTurn) isTurnRequest_GameTurn() {}

func (*TurnRequest_DomGameTurn) isTurnRequest_GameTurn() {}

func (*TurnRequest_DzoGameTurn) isTurnRequest_GameTurn() {}

func (*TurnRequest_TakGameTurn) isTurnRequest_GameTurn() {}

func (*TurnRequest_TkoGameTurn) isTurnRequest_GameTurn() {}

type TurnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TurnStatus TurnStatus `protobuf:"varint,1,opt,name=turn_status,json=turnStatus,proto3,enum=netcode.TurnStatus" json:"turn_status,omitempty"`
	// Types that are assignable to GameState:
	//
	//	*TurnResponse_NimGameState
	//	*TurnResponse_DabGameState
	//	*TurnResponse_DomGameState
	//	*TurnResponse_DzoGameState
	//	*TurnResponse_TakGameState
	//	*TurnResponse_TkoGameState
	GameState isTurnResponse_GameState `protobuf_oneof:"game_state"`
}

func (x *TurnResponse) Reset() {
	*x = TurnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnResponse) ProtoMessage() {}

func (x *TurnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnResponse.ProtoReflect.Descriptor instead.
func (*TurnResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{16}
}

func (x *TurnResponse) GetTurnStatus() TurnStatus {
	if x != nil {
		return x.TurnStatus
	}
	return TurnStatus_OK
}

func (m *TurnResponse) GetGameState() isTurnResponse_GameState {
	if m != nil {
		return m.GameState
	}
	return nil
}

func (x *TurnResponse) GetNimGameState() *nim.GameState {
	if x, ok := x.GetGameState().(*TurnResponse_NimGameState); ok {
		return x.NimGameState
	}
	return nil
}

func (x *TurnResponse) GetDabGameState() *dab.GameState {
	if x, ok := x.GetGameState().(*TurnResponse_DabGameState); ok {
		return x.DabGameState
	}
	return nil
}

func (x *TurnResponse) GetDomGameState() *dom.GameState {
	if x, ok := x.GetGameState().(*TurnResponse_DomGameState); ok {
		return x.DomGameState
	}
	return nil
}

func (x *TurnResponse) GetDzoGameState() *dozo.GameState {
	if x, ok := x.GetGameState().(*TurnResponse_DzoGameState); ok {
		return x.DzoGameState
	}
	return nil
}

func (x *TurnResponse) GetTakGameState() *tak.GameState {
	if x, ok := x.GetGameState().(*TurnResponse_TakGameState); ok {
		return x.TakGameState
	}
	return nil
}

func (x *TurnResponse) GetTkoGameState() *tko.GameState {
	if x, ok := x.GetGameState().(*TurnResponse_TkoGameState); ok {
		return x.TkoGameState
	}
	return nil
}

type isTurnResponse_GameState interface {
	isTurnResponse_GameState()
}

type TurnResponse_NimGameState struct {
	NimGameState *nim.GameState `protobuf:"bytes,10,opt,name=nim_game_state,json=nimGameState,proto3,oneof"`
}

type TurnResponse_DabGameState struct {
	DabGameState *dab.GameState `protobuf:"bytes,11,opt,name=dab_game_state,json=dabGameState,proto3,oneof"`
}

type TurnResponse_DomGameState struct {
	DomGameState *dom.GameState `protobuf:"bytes,12,opt,name=dom_game_state,json=domGameState,proto3,oneof"`
}

type TurnResponse_DzoGameState struct {
	DzoGameState *dozo.GameState `protobuf:"bytes,13,opt,name=dzo_game_state,json=dzoGameState,proto3,oneof"`
}

type TurnResponse_TakGameState struct {
	TakGameState *tak.GameState `protobuf:"bytes,14,opt,name=tak_game_state,json=takGameState,proto3,oneof"`
}

type TurnResponse_TkoGameState struct {
	TkoGameState *tko.GameState `protobuf:"bytes,15,opt,name=tko_game_state,json=tkoGameState,proto3,oneof"`
}

func (*TurnResponse_NimGameState) isTurnResponse_GameState() {}

func (*TurnResponse_DabGameState) isTurnResponse_GameState() {}

func (*TurnResponse_DomGameState) isTurnResponse_GameState() {}

func (*TurnResponse_DzoGameState) isTurnResponse_GameState() {}

func (*TurnResponse_TakGameState) isTurnResponse_GameState() {}

func (*TurnResponse_TkoGameState) isTurnResponse_GameState() {}

type GameStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStatus      GameStatus `protobuf:"varint,1,opt,name=game_status,json=gameStatus,proto3,enum=netcode.GameStatus" json:"game_status,omitempty"`
	BeginningPlayer bool       `protobuf:"varint,2,opt,name=beginning_player,json=beginningPlayer,proto3" json:"beginning_player,omitempty"`
	// Types that are assignable to GameState:
	//
	//	*GameStateResponse_NimGameState
	//	*GameStateResponse_DabGameState
	//	*GameStateResponse_DomGameState
	//	*GameStateResponse_DzoGameState
	//	*GameStateResponse_TakGameState
	//	*GameStateResponse_TkoGameState
	GameState isGameStateResponse_GameState `protobuf_oneof:"game_state"`
}

func (x *GameStateResponse) Reset() {
	*x = GameStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStateResponse) ProtoMessage() {}

func (x *GameStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStateResponse.ProtoReflect.Descriptor instead.
func (*GameStateResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{17}
}

func (x *GameStateResponse) GetGameStatus() GameStatus {
	if x != nil {
		return x.GameStatus
	}
	return GameStatus_YOUR_TURN
}

func (x *GameStateResponse) GetBeginningPlayer() bool {
	if x != nil {
		return x.BeginningPlayer
	}
	return false
}

func (m *GameStateResponse) GetGameState() isGameStateResponse_GameState {
	if m != nil {
		return m.GameState
	}
	return nil
}

func (x *GameStateResponse) GetNimGameState() *nim.GameState {
	if x, ok := x.GetGameState().(*GameStateResponse_NimGameState); ok {
		return x.NimGameState
	}
	return nil
}

func (x *GameStateResponse) GetDabGameState() *dab.GameState {
	if x, ok := x.GetGameState().(*GameStateResponse_DabGameState); ok {
		return x.DabGameState
	}
	return nil
}

func (x *GameStateResponse) GetDomGameState() *dom.GameState {
	if x, ok := x.GetGameState().(*GameStateResponse_DomGameState); ok {
		return x.DomGameState
	}
	return nil
}

func (x *GameStateResponse) GetDzoGameState() *dozo.GameState {
	if x, ok := x.GetGameState().(*GameStateResponse_DzoGameState); ok {
		return x.DzoGameState
	}
	return nil
}

func (x *GameStateResponse) GetTakGameState() *tak.GameState {
	if x, ok := x.GetGameState().(*GameStateResponse_TakGameState); ok {
		return x.TakGameState
	}
	return nil
}

func (x *GameStateResponse) GetTkoGameState() *tko.GameState {
	if x, ok := x.GetGameState().(*GameStateResponse_TkoGameState); ok {
		return x.TkoGameState
	}
	return nil
}

type isGameStateResponse_GameState interface {
	isGameStateResponse_GameState()
}

type GameStateResponse_NimGameState struct {
	NimGameState *nim.GameState `protobuf:"bytes,10,opt,name=nim_game_state,json=nimGameState,proto3,oneof"`
}

type GameStateResponse_DabGameState struct {
	DabGameState *dab.GameState `protobuf:"bytes,11,opt,name=dab_game_state,json=dabGameState,proto3,oneof"`
}

type GameStateResponse_DomGameState struct {
	DomGameState *dom.GameState `protobuf:"bytes,12,opt,name=dom_game_state,json=domGameState,proto3,oneof"`
}

type GameStateResponse_DzoGameState struct {
	DzoGameState *dozo.GameState `protobuf:"bytes,13,opt,name=dzo_game_state,json=dzoGameState,proto3,oneof"`
}

type GameStateResponse_TakGameState struct {
	TakGameState *tak.GameState `protobuf:"bytes,14,opt,name=tak_game_state,json=takGameState,proto3,oneof"`
}

type GameStateResponse_TkoGameState struct {
	TkoGameState *tko.GameState `protobuf:"bytes,15,opt,name=tko_game_state,json=tkoGameState,proto3,oneof"`
}

func (*GameStateResponse_NimGameState) isGameStateResponse_GameState() {}

func (*GameStateResponse_DabGameState) isGameStateResponse_GameState() {}

func (*GameStateResponse_DomGameState) isGameStateResponse_GameState() {}

func (*GameStateResponse_DzoGameState) isGameStateResponse_GameState() {}

func (*GameStateResponse_TakGameState) isGameStateResponse_GameState() {}

func (*GameStateResponse_TkoGameState) isGameStateResponse_GameState() {}

type EloValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserElo  float64 `protobuf:"fixed64,1,opt,name=user_elo,json=userElo,proto3" json:"user_elo,omitempty"`
	GroupElo float64 `protobuf:"fixed64,2,opt,name=group_elo,json=groupElo,proto3" json:"group_elo,omitempty"`
}

func (x *EloValues) Reset() {
	*x = EloValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EloValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EloValues) ProtoMessage() {}

func (x *EloValues) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EloValues.ProtoReflect.Descriptor instead.
func (*EloValues) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{18}
}

func (x *EloValues) GetUserElo() float64 {
	if x != nil {
		return x.UserElo
	}
	return 0
}

func (x *EloValues) GetGroupElo() float64 {
	if x != nil {
		return x.GroupElo
	}
	return 0
}

type OpponentInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPseudonym  string     `protobuf:"bytes,1,opt,name=user_pseudonym,json=userPseudonym,proto3" json:"user_pseudonym,omitempty"`
	GroupPseudonym string     `protobuf:"bytes,2,opt,name=group_pseudonym,json=groupPseudonym,proto3" json:"group_pseudonym,omitempty"`
	Elo            *EloValues `protobuf:"bytes,3,opt,name=elo,proto3" json:"elo,omitempty"`
}

func (x *OpponentInfoResponse) Reset() {
	*x = OpponentInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpponentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpponentInfoResponse) ProtoMessage() {}

func (x *OpponentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpponentInfoResponse.ProtoReflect.Descriptor instead.
func (*OpponentInfoResponse) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{19}
}

func (x *OpponentInfoResponse) GetUserPseudonym() string {
	if x != nil {
		return x.UserPseudonym
	}
	return ""
}

func (x *OpponentInfoResponse) GetGroupPseudonym() string {
	if x != nil {
		return x.GroupPseudonym
	}
	return ""
}

func (x *OpponentInfoResponse) GetElo() *EloValues {
	if x != nil {
		return x.Elo
	}
	return nil
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netcode_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_netcode_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_netcode_proto_rawDescGZIP(), []int{20}
}

var File_netcode_proto protoreflect.FileDescriptor

var file_netcode_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x09, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x64, 0x6f, 0x74, 0x73, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x6f, 0x7a, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x74, 0x61, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x09, 0x74, 0x6b, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x0a, 0x41,
	0x75, 0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x74, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x4f, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x29, 0x0a, 0x08, 0x49, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3d,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5c, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0xd0, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x74, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x05, 0x22, 0x35,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xca, 0x01, 0x0a,
	0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x04, 0x22, 0x64, 0x0a, 0x18, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xef, 0x01, 0x0a, 0x19, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4f, 0x5f, 0x4d,
	0x41, 0x4e, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x22, 0x38, 0x0a, 0x0f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x22, 0xae, 0x01, 0x0a, 0x14,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x0b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x97, 0x05, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x16, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x15, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x44, 0x0a, 0x13, 0x6e, 0x69, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x69, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x11, 0x6e, 0x69, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x64, 0x61, 0x62, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64, 0x61, 0x62, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x64,
	0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x6d, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11,
	0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x44, 0x0a, 0x13, 0x64, 0x7a, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x7a, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64, 0x7a, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x74, 0x61, 0x6b, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x6b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a,
	0x13, 0x74, 0x6b, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6b, 0x6f,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x11, 0x74, 0x6b, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x8b, 0x03, 0x0a, 0x0b, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0d, 0x6e, 0x69, 0x6d, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6e, 0x69, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0b,
	0x6e, 0x69, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x0d, 0x64,
	0x61, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x61, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e,
	0x12, 0x33, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6f, 0x6d, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x0d, 0x64, 0x7a, 0x6f, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x7a, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x7a, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x33, 0x0a, 0x0d, 0x74, 0x61,
	0x6b, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x61, 0x6b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12,
	0x33, 0x0a, 0x0d, 0x74, 0x6b, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x6b, 0x6f, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x75, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6b, 0x6f, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x75, 0x72, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x22, 0xa2, 0x03, 0x0a, 0x0c, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x6e, 0x69, 0x6d, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6e, 0x69, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x6e, 0x69, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x0e, 0x64, 0x61, 0x62, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x62, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x62, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x0e, 0x64, 0x7a, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x7a, 0x6f, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x7a, 0x6f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x61, 0x6b, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x61, 0x6b, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x0e, 0x74, 0x6b, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x6b, 0x6f, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x6b, 0x6f, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd2, 0x03, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x0e, 0x6e, 0x69, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x69, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x69, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x61, 0x62, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x61, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x61, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x64, 0x6f, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x64, 0x7a, 0x6f, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x7a, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x7a, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x0e, 0x74, 0x61, 0x6b, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x61, 0x6b, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x61, 0x6b, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x6b, 0x6f, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x6b, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x74, 0x6b, 0x6f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x09, 0x45,
	0x6c, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6c, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6c, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6c, 0x6f,
	0x22, 0x8c, 0x01, 0x0a, 0x14, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x6e, 0x79, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x12, 0x24, 0x0a, 0x03, 0x65, 0x6c, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x45, 0x6c, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x03, 0x65, 0x6c, 0x6f, 0x22,
	0x09, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2a, 0x49, 0x0a, 0x0a, 0x54, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x55, 0x52, 0x4e,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x54,
	0x55, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x82, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x55, 0x52,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x53,
	0x5f, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x57, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x4c, 0x4f, 0x53, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x41, 0x57, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x32, 0xd5, 0x06, 0x0a, 0x07, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12,
	0x14, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x6e,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16,
	0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x1d,
	0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x6f, 0x12,
	0x11, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x44, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6c, 0x6f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6e,
	0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d,
	0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x73,
	0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79,
	0x6d, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x73, 0x65, 0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x6e, 0x79, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x13,
	0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_netcode_proto_rawDescOnce sync.Once
	file_netcode_proto_rawDescData = file_netcode_proto_rawDesc
)

func file_netcode_proto_rawDescGZIP() []byte {
	file_netcode_proto_rawDescOnce.Do(func() {
		file_netcode_proto_rawDescData = protoimpl.X.CompressGZIP(file_netcode_proto_rawDescData)
	})
	return file_netcode_proto_rawDescData
}

var file_netcode_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_netcode_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_netcode_proto_goTypes = []interface{}{
	(TurnStatus)(0),                          // 0: netcode.TurnStatus
	(GameStatus)(0),                          // 1: netcode.GameStatus
	(SetPseudonymResponse_ErrorCode)(0),      // 2: netcode.SetPseudonymResponse.ErrorCode
	(UserRegistrationResponse_ErrorCode)(0),  // 3: netcode.UserRegistrationResponse.ErrorCode
	(GroupRegistrationResponse_ErrorCode)(0), // 4: netcode.GroupRegistrationResponse.ErrorCode
	(*AuthPacket)(nil),                       // 5: netcode.AuthPacket
	(*MatchIDPacket)(nil),                    // 6: netcode.MatchIDPacket
	(*IDPacket)(nil),                         // 7: netcode.IDPacket
	(*GetTimeoutResponse)(nil),               // 8: netcode.GetTimeoutResponse
	(*SetPseudonymRequest)(nil),              // 9: netcode.SetPseudonymRequest
	(*SetPseudonymResponse)(nil),             // 10: netcode.SetPseudonymResponse
	(*GetUserTokenResponse)(nil),             // 11: netcode.GetUserTokenResponse
	(*UserRegistrationRequest)(nil),          // 12: netcode.UserRegistrationRequest
	(*UserRegistrationResponse)(nil),         // 13: netcode.UserRegistrationResponse
	(*GroupRegistrationRequest)(nil),         // 14: netcode.GroupRegistrationRequest
	(*GroupRegistrationResponse)(nil),        // 15: netcode.GroupRegistrationResponse
	(*DirectChallenge)(nil),                  // 16: netcode.DirectChallenge
	(*MatchmakingParameter)(nil),             // 17: netcode.MatchmakingParameter
	(*MatchRequest)(nil),                     // 18: netcode.MatchRequest
	(*MatchResponse)(nil),                    // 19: netcode.MatchResponse
	(*TurnRequest)(nil),                      // 20: netcode.TurnRequest
	(*TurnResponse)(nil),                     // 21: netcode.TurnResponse
	(*GameStateResponse)(nil),                // 22: netcode.GameStateResponse
	(*EloValues)(nil),                        // 23: netcode.EloValues
	(*OpponentInfoResponse)(nil),             // 24: netcode.OpponentInfoResponse
	(*Nothing)(nil),                          // 25: netcode.Nothing
	(*nim.GameParameter)(nil),                // 26: nim.GameParameter
	(*dab.GameParameter)(nil),                // 27: dab.GameParameter
	(*dom.GameParameter)(nil),                // 28: dom.GameParameter
	(*dozo.GameParameter)(nil),               // 29: dzo.GameParameter
	(*tak.GameParameter)(nil),                // 30: tak.GameParameter
	(*tko.GameParameter)(nil),                // 31: tko.GameParameter
	(*nim.GameTurn)(nil),                     // 32: nim.GameTurn
	(*dab.GameTurn)(nil),                     // 33: dab.GameTurn
	(*dom.GameTurn)(nil),                     // 34: dom.GameTurn
	(*dozo.GameTurn)(nil),                    // 35: dzo.GameTurn
	(*tak.GameTurn)(nil),                     // 36: tak.GameTurn
	(*tko.GameTurn)(nil),                     // 37: tko.GameTurn
	(*nim.GameState)(nil),                    // 38: nim.GameState
	(*dab.GameState)(nil),                    // 39: dab.GameState
	(*dom.GameState)(nil),                    // 40: dom.GameState
	(*dozo.GameState)(nil),                   // 41: dzo.GameState
	(*tak.GameState)(nil),                    // 42: tak.GameState
	(*tko.GameState)(nil),                    // 43: tko.GameState
}
var file_netcode_proto_depIdxs = []int32{
	5,  // 0: netcode.SetPseudonymRequest.auth:type_name -> netcode.AuthPacket
	2,  // 1: netcode.SetPseudonymResponse.error_code:type_name -> netcode.SetPseudonymResponse.ErrorCode
	3,  // 2: netcode.UserRegistrationResponse.error_code:type_name -> netcode.UserRegistrationResponse.ErrorCode
	5,  // 3: netcode.GroupRegistrationRequest.auth:type_name -> netcode.AuthPacket
	4,  // 4: netcode.GroupRegistrationResponse.error_code:type_name -> netcode.GroupRegistrationResponse.ErrorCode
	25, // 5: netcode.MatchmakingParameter.random_is_default:type_name -> netcode.Nothing
	16, // 6: netcode.MatchmakingParameter.direct_matchmaking:type_name -> netcode.DirectChallenge
	17, // 7: netcode.MatchRequest.matchmaking_parameters:type_name -> netcode.MatchmakingParameter
	26, // 8: netcode.MatchRequest.nim_game_parameters:type_name -> nim.GameParameter
	27, // 9: netcode.MatchRequest.dab_game_parameters:type_name -> dab.GameParameter
	28, // 10: netcode.MatchRequest.dom_game_parameters:type_name -> dom.GameParameter
	29, // 11: netcode.MatchRequest.dzo_game_parameters:type_name -> dzo.GameParameter
	30, // 12: netcode.MatchRequest.tak_game_parameters:type_name -> tak.GameParameter
	31, // 13: netcode.MatchRequest.tko_game_parameters:type_name -> tko.GameParameter
	6,  // 14: netcode.TurnRequest.match_id:type_name -> netcode.MatchIDPacket
	32, // 15: netcode.TurnRequest.nim_game_turn:type_name -> nim.GameTurn
	33, // 16: netcode.TurnRequest.dab_game_turn:type_name -> dab.GameTurn
	34, // 17: netcode.TurnRequest.dom_game_turn:type_name -> dom.GameTurn
	35, // 18: netcode.TurnRequest.dzo_game_turn:type_name -> dzo.GameTurn
	36, // 19: netcode.TurnRequest.tak_game_turn:type_name -> tak.GameTurn
	37, // 20: netcode.TurnRequest.tko_game_turn:type_name -> tko.GameTurn
	0,  // 21: netcode.TurnResponse.turn_status:type_name -> netcode.TurnStatus
	38, // 22: netcode.TurnResponse.nim_game_state:type_name -> nim.GameState
	39, // 23: netcode.TurnResponse.dab_game_state:type_name -> dab.GameState
	40, // 24: netcode.TurnResponse.dom_game_state:type_name -> dom.GameState
	41, // 25: netcode.TurnResponse.dzo_game_state:type_name -> dzo.GameState
	42, // 26: netcode.TurnResponse.tak_game_state:type_name -> tak.GameState
	43, // 27: netcode.TurnResponse.tko_game_state:type_name -> tko.GameState
	1,  // 28: netcode.GameStateResponse.game_status:type_name -> netcode.GameStatus
	38, // 29: netcode.GameStateResponse.nim_game_state:type_name -> nim.GameState
	39, // 30: netcode.GameStateResponse.dab_game_state:type_name -> dab.GameState
	40, // 31: netcode.GameStateResponse.dom_game_state:type_name -> dom.GameState
	41, // 32: netcode.GameStateResponse.dzo_game_state:type_name -> dzo.GameState
	42, // 33: netcode.GameStateResponse.tak_game_state:type_name -> tak.GameState
	43, // 34: netcode.GameStateResponse.tko_game_state:type_name -> tko.GameState
	23, // 35: netcode.OpponentInfoResponse.elo:type_name -> netcode.EloValues
	18, // 36: netcode.GameCom.NewMatch:input_type -> netcode.MatchRequest
	20, // 37: netcode.GameCom.SubmitTurn:input_type -> netcode.TurnRequest
	6,  // 38: netcode.GameCom.GetGameState:input_type -> netcode.MatchIDPacket
	6,  // 39: netcode.GameCom.GetTimeout:input_type -> netcode.MatchIDPacket
	6,  // 40: netcode.GameCom.GetOpponentInfo:input_type -> netcode.MatchIDPacket
	6,  // 41: netcode.GameCom.AbortMatch:input_type -> netcode.MatchIDPacket
	7,  // 42: netcode.GameCom.GetElo:input_type -> netcode.IDPacket
	12, // 43: netcode.GameCom.UserRegistration:input_type -> netcode.UserRegistrationRequest
	14, // 44: netcode.GameCom.GroupRegistration:input_type -> netcode.GroupRegistrationRequest
	9,  // 45: netcode.GameCom.SetGroupPseudonym:input_type -> netcode.SetPseudonymRequest
	9,  // 46: netcode.GameCom.SetUserPseudonym:input_type -> netcode.SetPseudonymRequest
	5,  // 47: netcode.GameCom.GetUserToken:input_type -> netcode.AuthPacket
	19, // 48: netcode.GameCom.NewMatch:output_type -> netcode.MatchResponse
	21, // 49: netcode.GameCom.SubmitTurn:output_type -> netcode.TurnResponse
	22, // 50: netcode.GameCom.GetGameState:output_type -> netcode.GameStateResponse
	8,  // 51: netcode.GameCom.GetTimeout:output_type -> netcode.GetTimeoutResponse
	24, // 52: netcode.GameCom.GetOpponentInfo:output_type -> netcode.OpponentInfoResponse
	25, // 53: netcode.GameCom.AbortMatch:output_type -> netcode.Nothing
	23, // 54: netcode.GameCom.GetElo:output_type -> netcode.EloValues
	13, // 55: netcode.GameCom.UserRegistration:output_type -> netcode.UserRegistrationResponse
	15, // 56: netcode.GameCom.GroupRegistration:output_type -> netcode.GroupRegistrationResponse
	10, // 57: netcode.GameCom.SetGroupPseudonym:output_type -> netcode.SetPseudonymResponse
	10, // 58: netcode.GameCom.SetUserPseudonym:output_type -> netcode.SetPseudonymResponse
	11, // 59: netcode.GameCom.GetUserToken:output_type -> netcode.GetUserTokenResponse
	48, // [48:60] is the sub-list for method output_type
	36, // [36:48] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_netcode_proto_init() }
func file_netcode_proto_init() {
	if File_netcode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_netcode_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchIDPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTimeoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPseudonymRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPseudonymResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchmakingParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EloValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpponentInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netcode_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_netcode_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MatchmakingParameter_RandomIsDefault)(nil),
		(*MatchmakingParameter_DirectMatchmaking)(nil),
	}
	file_netcode_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MatchRequest_NimGameParameters)(nil),
		(*MatchRequest_DabGameParameters)(nil),
		(*MatchRequest_DomGameParameters)(nil),
		(*MatchRequest_DzoGameParameters)(nil),
		(*MatchRequest_TakGameParameters)(nil),
		(*MatchRequest_TkoGameParameters)(nil),
	}
	file_netcode_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TurnRequest_NimGameTurn)(nil),
		(*TurnRequest_DabGameTurn)(nil),
		(*TurnRequest_DomGameTurn)(nil),
		(*TurnRequest_DzoGameTurn)(nil),
		(*TurnRequest_TakGameTurn)(nil),
		(*TurnRequest_TkoGameTurn)(nil),
	}
	file_netcode_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*TurnResponse_NimGameState)(nil),
		(*TurnResponse_DabGameState)(nil),
		(*TurnResponse_DomGameState)(nil),
		(*TurnResponse_DzoGameState)(nil),
		(*TurnResponse_TakGameState)(nil),
		(*TurnResponse_TkoGameState)(nil),
	}
	file_netcode_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GameStateResponse_NimGameState)(nil),
		(*GameStateResponse_DabGameState)(nil),
		(*GameStateResponse_DomGameState)(nil),
		(*GameStateResponse_DzoGameState)(nil),
		(*GameStateResponse_TakGameState)(nil),
		(*GameStateResponse_TkoGameState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netcode_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_netcode_proto_goTypes,
		DependencyIndexes: file_netcode_proto_depIdxs,
		EnumInfos:         file_netcode_proto_enumTypes,
		MessageInfos:      file_netcode_proto_msgTypes,
	}.Build()
	File_netcode_proto = out.File
	file_netcode_proto_rawDesc = nil
	file_netcode_proto_goTypes = nil
	file_netcode_proto_depIdxs = nil
}
