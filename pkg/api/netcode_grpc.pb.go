// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: netcode.proto

package netcode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameComClient is the client API for GameCom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameComClient interface {
	// Game-related
	NewMatch(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	SubmitTurn(ctx context.Context, in *TurnRequest, opts ...grpc.CallOption) (*TurnResponse, error)
	GetGameState(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*GameStateResponse, error)
	GetTimeout(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*GetTimeoutResponse, error)
	GetOpponentInfo(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*OpponentInfoResponse, error)
	AbortMatch(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*Nothing, error)
	GetElo(ctx context.Context, in *IDPacket, opts ...grpc.CallOption) (*EloValues, error)
	// Organisation-related
	UserRegistration(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error)
	GroupRegistration(ctx context.Context, in *GroupRegistrationRequest, opts ...grpc.CallOption) (*GroupRegistrationResponse, error)
	SetGroupPseudonym(ctx context.Context, in *SetPseudonymRequest, opts ...grpc.CallOption) (*SetPseudonymResponse, error)
	SetUserPseudonym(ctx context.Context, in *SetPseudonymRequest, opts ...grpc.CallOption) (*SetPseudonymResponse, error)
	GetUserToken(ctx context.Context, in *AuthPacket, opts ...grpc.CallOption) (*GetUserTokenResponse, error)
}

type gameComClient struct {
	cc grpc.ClientConnInterface
}

func NewGameComClient(cc grpc.ClientConnInterface) GameComClient {
	return &gameComClient{cc}
}

func (c *gameComClient) NewMatch(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/NewMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) SubmitTurn(ctx context.Context, in *TurnRequest, opts ...grpc.CallOption) (*TurnResponse, error) {
	out := new(TurnResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/SubmitTurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) GetGameState(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*GameStateResponse, error) {
	out := new(GameStateResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/GetGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) GetTimeout(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*GetTimeoutResponse, error) {
	out := new(GetTimeoutResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/GetTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) GetOpponentInfo(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*OpponentInfoResponse, error) {
	out := new(OpponentInfoResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/GetOpponentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) AbortMatch(ctx context.Context, in *MatchIDPacket, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/AbortMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) GetElo(ctx context.Context, in *IDPacket, opts ...grpc.CallOption) (*EloValues, error) {
	out := new(EloValues)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/GetElo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) UserRegistration(ctx context.Context, in *UserRegistrationRequest, opts ...grpc.CallOption) (*UserRegistrationResponse, error) {
	out := new(UserRegistrationResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/UserRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) GroupRegistration(ctx context.Context, in *GroupRegistrationRequest, opts ...grpc.CallOption) (*GroupRegistrationResponse, error) {
	out := new(GroupRegistrationResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/GroupRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) SetGroupPseudonym(ctx context.Context, in *SetPseudonymRequest, opts ...grpc.CallOption) (*SetPseudonymResponse, error) {
	out := new(SetPseudonymResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/SetGroupPseudonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) SetUserPseudonym(ctx context.Context, in *SetPseudonymRequest, opts ...grpc.CallOption) (*SetPseudonymResponse, error) {
	out := new(SetPseudonymResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/SetUserPseudonym", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameComClient) GetUserToken(ctx context.Context, in *AuthPacket, opts ...grpc.CallOption) (*GetUserTokenResponse, error) {
	out := new(GetUserTokenResponse)
	err := c.cc.Invoke(ctx, "/netcode.GameCom/GetUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameComServer is the server API for GameCom service.
// All implementations must embed UnimplementedGameComServer
// for forward compatibility
type GameComServer interface {
	// Game-related
	NewMatch(context.Context, *MatchRequest) (*MatchResponse, error)
	SubmitTurn(context.Context, *TurnRequest) (*TurnResponse, error)
	GetGameState(context.Context, *MatchIDPacket) (*GameStateResponse, error)
	GetTimeout(context.Context, *MatchIDPacket) (*GetTimeoutResponse, error)
	GetOpponentInfo(context.Context, *MatchIDPacket) (*OpponentInfoResponse, error)
	AbortMatch(context.Context, *MatchIDPacket) (*Nothing, error)
	GetElo(context.Context, *IDPacket) (*EloValues, error)
	// Organisation-related
	UserRegistration(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error)
	GroupRegistration(context.Context, *GroupRegistrationRequest) (*GroupRegistrationResponse, error)
	SetGroupPseudonym(context.Context, *SetPseudonymRequest) (*SetPseudonymResponse, error)
	SetUserPseudonym(context.Context, *SetPseudonymRequest) (*SetPseudonymResponse, error)
	GetUserToken(context.Context, *AuthPacket) (*GetUserTokenResponse, error)
	mustEmbedUnimplementedGameComServer()
}

// UnimplementedGameComServer must be embedded to have forward compatible implementations.
type UnimplementedGameComServer struct {
}

func (UnimplementedGameComServer) NewMatch(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMatch not implemented")
}
func (UnimplementedGameComServer) SubmitTurn(context.Context, *TurnRequest) (*TurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTurn not implemented")
}
func (UnimplementedGameComServer) GetGameState(context.Context, *MatchIDPacket) (*GameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedGameComServer) GetTimeout(context.Context, *MatchIDPacket) (*GetTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeout not implemented")
}
func (UnimplementedGameComServer) GetOpponentInfo(context.Context, *MatchIDPacket) (*OpponentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpponentInfo not implemented")
}
func (UnimplementedGameComServer) AbortMatch(context.Context, *MatchIDPacket) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMatch not implemented")
}
func (UnimplementedGameComServer) GetElo(context.Context, *IDPacket) (*EloValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElo not implemented")
}
func (UnimplementedGameComServer) UserRegistration(context.Context, *UserRegistrationRequest) (*UserRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegistration not implemented")
}
func (UnimplementedGameComServer) GroupRegistration(context.Context, *GroupRegistrationRequest) (*GroupRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRegistration not implemented")
}
func (UnimplementedGameComServer) SetGroupPseudonym(context.Context, *SetPseudonymRequest) (*SetPseudonymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupPseudonym not implemented")
}
func (UnimplementedGameComServer) SetUserPseudonym(context.Context, *SetPseudonymRequest) (*SetPseudonymResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPseudonym not implemented")
}
func (UnimplementedGameComServer) GetUserToken(context.Context, *AuthPacket) (*GetUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedGameComServer) mustEmbedUnimplementedGameComServer() {}

// UnsafeGameComServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameComServer will
// result in compilation errors.
type UnsafeGameComServer interface {
	mustEmbedUnimplementedGameComServer()
}

func RegisterGameComServer(s grpc.ServiceRegistrar, srv GameComServer) {
	s.RegisterService(&GameCom_ServiceDesc, srv)
}

func _GameCom_NewMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).NewMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/NewMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).NewMatch(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_SubmitTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).SubmitTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/SubmitTurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).SubmitTurn(ctx, req.(*TurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchIDPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/GetGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).GetGameState(ctx, req.(*MatchIDPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_GetTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchIDPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).GetTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/GetTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).GetTimeout(ctx, req.(*MatchIDPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_GetOpponentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchIDPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).GetOpponentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/GetOpponentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).GetOpponentInfo(ctx, req.(*MatchIDPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_AbortMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchIDPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).AbortMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/AbortMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).AbortMatch(ctx, req.(*MatchIDPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_GetElo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).GetElo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/GetElo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).GetElo(ctx, req.(*IDPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_UserRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).UserRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/UserRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).UserRegistration(ctx, req.(*UserRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_GroupRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).GroupRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/GroupRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).GroupRegistration(ctx, req.(*GroupRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_SetGroupPseudonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPseudonymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).SetGroupPseudonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/SetGroupPseudonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).SetGroupPseudonym(ctx, req.(*SetPseudonymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_SetUserPseudonym_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPseudonymRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).SetUserPseudonym(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/SetUserPseudonym",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).SetUserPseudonym(ctx, req.(*SetPseudonymRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameCom_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameComServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcode.GameCom/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameComServer).GetUserToken(ctx, req.(*AuthPacket))
	}
	return interceptor(ctx, in, info, handler)
}

// GameCom_ServiceDesc is the grpc.ServiceDesc for GameCom service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameCom_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netcode.GameCom",
	HandlerType: (*GameComServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMatch",
			Handler:    _GameCom_NewMatch_Handler,
		},
		{
			MethodName: "SubmitTurn",
			Handler:    _GameCom_SubmitTurn_Handler,
		},
		{
			MethodName: "GetGameState",
			Handler:    _GameCom_GetGameState_Handler,
		},
		{
			MethodName: "GetTimeout",
			Handler:    _GameCom_GetTimeout_Handler,
		},
		{
			MethodName: "GetOpponentInfo",
			Handler:    _GameCom_GetOpponentInfo_Handler,
		},
		{
			MethodName: "AbortMatch",
			Handler:    _GameCom_AbortMatch_Handler,
		},
		{
			MethodName: "GetElo",
			Handler:    _GameCom_GetElo_Handler,
		},
		{
			MethodName: "UserRegistration",
			Handler:    _GameCom_UserRegistration_Handler,
		},
		{
			MethodName: "GroupRegistration",
			Handler:    _GameCom_GroupRegistration_Handler,
		},
		{
			MethodName: "SetGroupPseudonym",
			Handler:    _GameCom_SetGroupPseudonym_Handler,
		},
		{
			MethodName: "SetUserPseudonym",
			Handler:    _GameCom_SetUserPseudonym_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _GameCom_GetUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netcode.proto",
}
